
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Nov 22 14:55:43 CST 2018
//----------------------------------------------------

package lexicalanalyzerc;

import java_cup.runtime.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Nov 22 14:55:43 CST 2018
  */
public class RulesSS extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public RulesSS() {super();}

  /** Constructor which sets the default scanner. */
  public RulesSS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public RulesSS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\166\000\002\002\004\000\002\002\004\000\002\033" +
    "\004\000\002\033\002\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\004\000" +
    "\002\003\004\000\002\004\004\000\002\005\004\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\004\000\002\047\002" +
    "\000\002\050\002\000\002\051\002\000\002\007\013\000" +
    "\002\052\002\000\002\053\002\000\002\054\002\000\002" +
    "\007\013\000\002\010\004\000\002\010\002\000\002\034" +
    "\005\000\002\034\002\000\002\055\002\000\002\056\002" +
    "\000\002\011\013\000\002\035\004\000\002\035\002\000" +
    "\002\036\005\000\002\036\002\000\002\037\005\000\002" +
    "\037\002\000\002\040\004\000\002\040\002\000\002\012" +
    "\003\000\002\012\003\000\002\057\002\000\002\060\002" +
    "\000\002\013\011\000\002\041\004\000\002\041\002\000" +
    "\002\014\010\000\002\014\010\000\002\061\002\000\002" +
    "\015\007\000\002\042\004\000\002\042\002\000\002\043" +
    "\004\000\002\043\002\000\002\016\004\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\044\003\000\002\044\002\000\002\017\010\000\002\046" +
    "\004\000\002\046\002\000\002\020\007\000\002\021\013" +
    "\000\002\022\005\000\002\023\004\000\002\024\010\000" +
    "\002\045\005\000\002\045\002\000\002\025\005\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\062\002\000\002\025\006\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\004\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\004\000\002\025\006\000\002\025\010\000" +
    "\002\025\005\000\002\025\005\000\002\025\006\000\002" +
    "\026\003\000\002\026\005\000\002\026\006\000\002\027" +
    "\006\000\002\027\010\000\002\027\010\000\002\030\006" +
    "\000\002\030\010\000\002\031\004\000\002\031\002\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\355\000\024\003\017\005\024\006\016\007\021\010" +
    "\005\015\013\017\023\024\020\066\014\001\002\000\006" +
    "\065\077\066\350\001\002\000\010\014\ufff2\065\ufff2\066" +
    "\ufff2\001\002\000\026\002\ufffa\003\ufffa\005\ufffa\006\ufffa" +
    "\007\ufffa\010\ufffa\015\ufffa\017\ufffa\024\ufffa\066\ufffa\001" +
    "\002\000\026\002\ufffd\003\ufffd\005\ufffd\006\ufffd\007\ufffd" +
    "\010\ufffd\015\ufffd\017\ufffd\024\ufffd\066\ufffd\001\002\000" +
    "\026\002\ufffe\003\017\005\024\006\016\007\021\010\005" +
    "\015\013\017\023\024\020\066\014\001\002\000\004\004" +
    "\344\001\002\000\004\002\343\001\002\000\004\066\107" +
    "\001\002\000\010\014\ufff1\065\ufff1\066\ufff1\001\002\000" +
    "\026\002\ufffb\003\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb" +
    "\015\ufffb\017\ufffb\024\ufffb\066\ufffb\001\002\000\010\014" +
    "\ufff4\065\ufff4\066\ufff4\001\002\000\006\004\106\022\105" +
    "\001\002\000\004\066\051\001\002\000\010\014\ufff3\065" +
    "\ufff3\066\ufff3\001\002\000\026\002\ufffc\003\ufffc\005\ufffc" +
    "\006\ufffc\007\ufffc\010\ufffc\015\ufffc\017\ufffc\024\ufffc\066" +
    "\ufffc\001\002\000\004\066\025\001\002\000\010\014\ufff5" +
    "\065\ufff5\066\ufff5\001\002\000\010\020\uffe3\021\uffe3\023" +
    "\uffe3\001\002\000\010\020\027\021\uffdf\023\uffdf\001\002" +
    "\000\004\066\050\001\002\000\006\021\uffdd\023\031\001" +
    "\002\000\004\066\043\001\002\000\004\021\033\001\002" +
    "\000\020\005\uffe2\006\uffe2\007\uffe2\010\uffe2\015\uffe2\022" +
    "\uffe2\066\uffe2\001\002\000\020\005\024\006\016\007\021" +
    "\010\005\015\013\022\uffd9\066\014\001\002\000\020\005" +
    "\uffd8\006\uffd8\007\uffd8\010\uffd8\015\uffd8\022\uffd8\066\uffd8" +
    "\001\002\000\020\005\024\006\016\007\021\010\005\015" +
    "\013\022\uffd9\066\014\001\002\000\004\022\041\001\002" +
    "\000\020\005\uffd7\006\uffd7\007\uffd7\010\uffd7\015\uffd7\022" +
    "\uffd7\066\uffd7\001\002\000\026\002\uffe1\003\uffe1\005\uffe1" +
    "\006\uffe1\007\uffe1\010\uffe1\015\uffe1\017\uffe1\024\uffe1\066" +
    "\uffe1\001\002\000\004\022\uffda\001\002\000\006\016\044" +
    "\021\uffdb\001\002\000\004\066\046\001\002\000\004\021" +
    "\uffde\001\002\000\006\016\044\021\uffdb\001\002\000\004" +
    "\021\uffdc\001\002\000\006\021\uffe0\023\uffe0\001\002\000" +
    "\004\021\uffd6\001\002\000\004\021\053\001\002\000\020" +
    "\005\uffd5\006\uffd5\007\uffd5\010\uffd5\015\uffd5\022\uffd5\066" +
    "\uffd5\001\002\000\020\005\024\006\016\007\021\010\005" +
    "\015\056\022\uffd2\066\014\001\002\000\006\065\077\066" +
    "\100\001\002\000\004\066\063\001\002\000\004\022\062" +
    "\001\002\000\020\005\024\006\016\007\021\010\005\015" +
    "\056\022\uffd2\066\014\001\002\000\004\022\uffd3\001\002" +
    "\000\026\002\uffd4\003\uffd4\005\uffd4\006\uffd4\007\uffd4\010" +
    "\uffd4\015\uffd4\017\uffd4\024\uffd4\066\uffd4\001\002\000\004" +
    "\013\064\001\002\000\016\005\024\006\016\007\021\010" +
    "\005\014\uffe6\066\014\001\002\000\006\065\077\066\076" +
    "\001\002\000\006\014\uffe4\016\072\001\002\000\004\014" +
    "\070\001\002\000\004\004\071\001\002\000\020\005\uffd0" +
    "\006\uffd0\007\uffd0\010\uffd0\015\uffd0\022\uffd0\066\uffd0\001" +
    "\002\000\014\005\024\006\016\007\021\010\005\066\014" +
    "\001\002\000\004\014\uffe7\001\002\000\006\014\uffe4\016" +
    "\072\001\002\000\004\014\uffe5\001\002\000\010\004\ufff6" +
    "\014\ufff6\016\ufff6\001\002\000\010\014\ufff0\065\ufff0\066" +
    "\ufff0\001\002\000\004\013\101\001\002\000\016\005\024" +
    "\006\016\007\021\010\005\014\uffe6\066\014\001\002\000" +
    "\004\014\103\001\002\000\004\004\104\001\002\000\020" +
    "\005\uffd1\006\uffd1\007\uffd1\010\uffd1\015\uffd1\022\uffd1\066" +
    "\uffd1\001\002\000\026\002\ufff8\003\ufff8\005\ufff8\006\ufff8" +
    "\007\ufff8\010\ufff8\015\ufff8\017\ufff8\024\ufff8\066\ufff8\001" +
    "\002\000\026\002\ufff9\003\ufff9\005\ufff9\006\ufff9\007\ufff9" +
    "\010\ufff9\015\ufff9\017\ufff9\024\ufff9\066\ufff9\001\002\000" +
    "\004\013\uffeb\001\002\000\004\013\111\001\002\000\016" +
    "\005\uffea\006\uffea\007\uffea\010\uffea\014\uffea\066\uffea\001" +
    "\002\000\016\005\024\006\016\007\021\010\005\014\uffe6" +
    "\066\014\001\002\000\004\014\uffe9\001\002\000\004\014" +
    "\115\001\002\000\004\021\116\001\002\000\072\004\uffcf" +
    "\005\uffcf\006\uffcf\007\uffcf\010\uffcf\013\uffcf\021\uffcf\022" +
    "\uffcf\025\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf" +
    "\035\uffcf\037\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf\057" +
    "\uffcf\060\uffcf\064\uffcf\066\uffcf\067\uffcf\070\uffcf\071\uffcf" +
    "\072\uffcf\001\002\000\030\002\uffe8\003\uffe8\005\uffe8\006" +
    "\uffe8\007\uffe8\010\uffe8\015\uffe8\017\uffe8\022\uffe8\024\uffe8" +
    "\066\uffe8\001\002\000\072\004\uffcc\005\uffcc\006\uffcc\007" +
    "\uffcc\010\uffcc\013\uffcc\021\uffcc\022\uffcc\025\uffcc\027\uffcc" +
    "\030\uffcc\031\uffcc\032\uffcc\033\uffcc\035\uffcc\037\uffcc\053" +
    "\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\064\uffcc" +
    "\066\uffcc\067\uffcc\070\uffcc\071\uffcc\072\uffcc\001\002\000" +
    "\072\004\uffc0\005\024\006\016\007\021\010\005\013\124" +
    "\021\116\022\uffca\025\137\027\132\030\154\031\144\032" +
    "\150\033\163\035\141\037\133\053\134\054\153\055\135" +
    "\056\126\057\147\060\157\064\146\066\143\067\164\070" +
    "\165\071\131\072\142\001\002\000\064\004\uffc4\013\uffc4" +
    "\021\uffc4\022\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031" +
    "\uffc4\032\uffc4\033\uffc4\035\uffc4\037\uffc4\053\uffc4\054\uffc4" +
    "\055\uffc4\056\uffc4\057\uffc4\060\uffc4\064\uffc4\066\uffc4\067" +
    "\uffc4\070\uffc4\071\uffc4\072\uffc4\001\002\000\004\004\342" +
    "\001\002\000\040\013\124\035\141\037\133\053\134\054" +
    "\153\055\135\056\126\057\147\060\157\064\146\066\170" +
    "\067\164\070\165\071\131\072\142\001\002\000\050\004" +
    "\uffb4\011\uffb4\012\uffb4\014\uffb4\016\uffb4\036\uffb4\037\uffb4" +
    "\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046" +
    "\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\061\uffb4\001\002" +
    "\000\004\013\335\001\002\000\064\004\uffc6\013\uffc6\021" +
    "\uffc6\022\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6" +
    "\032\uffc6\033\uffc6\035\uffc6\037\uffc6\053\uffc6\054\uffc6\055" +
    "\uffc6\056\uffc6\057\uffc6\060\uffc6\064\uffc6\066\uffc6\067\uffc6" +
    "\070\uffc6\071\uffc6\072\uffc6\001\002\000\064\004\uffc3\013" +
    "\uffc3\021\uffc3\022\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3" +
    "\031\uffc3\032\uffc3\033\uffc3\035\uffc3\037\uffc3\053\uffc3\054" +
    "\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3\064\uffc3\066\uffc3" +
    "\067\uffc3\070\uffc3\071\uffc3\072\uffc3\001\002\000\050\004" +
    "\uff8f\011\uff8f\012\uff8f\014\uff8f\016\uff8f\036\uff8f\037\uff8f" +
    "\040\uff8f\041\uff8f\042\uff8f\043\uff8f\044\uff8f\045\uff8f\046" +
    "\uff8f\047\uff8f\050\uff8f\051\uff8f\052\uff8f\061\uff8f\001\002" +
    "\000\004\013\325\001\002\000\040\013\124\035\141\037" +
    "\133\053\134\054\153\055\135\056\126\057\147\060\157" +
    "\064\146\066\170\067\164\070\165\071\131\072\142\001" +
    "\002\000\040\013\124\035\141\037\133\053\134\054\153" +
    "\055\135\056\126\057\147\060\157\064\146\066\170\067" +
    "\164\070\165\071\131\072\142\001\002\000\004\013\316" +
    "\001\002\000\064\004\uffc7\013\uffc7\021\uffc7\022\uffc7\025" +
    "\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7" +
    "\035\uffc7\037\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7\057" +
    "\uffc7\060\uffc7\064\uffc7\066\uffc7\067\uffc7\070\uffc7\071\uffc7" +
    "\072\uffc7\001\002\000\004\013\307\001\002\000\004\022" +
    "\306\001\002\000\050\004\uffb2\011\uffb2\012\uffb2\014\uffb2" +
    "\016\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043" +
    "\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2" +
    "\052\uffb2\061\uffb2\001\002\000\050\004\uff8e\011\uff8e\012" +
    "\uff8e\014\uff8e\016\uff8e\036\uff8e\037\uff8e\040\uff8e\041\uff8e" +
    "\042\uff8e\043\uff8e\044\uff8e\045\uff8e\046\uff8e\047\uff8e\050" +
    "\uff8e\051\uff8e\052\uff8e\061\uff8e\001\002\000\052\004\uff9a" +
    "\011\uff9a\013\171\034\uff9a\036\uff9a\037\uff9a\040\uff9a\041" +
    "\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a" +
    "\050\uff9a\051\uff9a\052\uff9a\061\uff9a\065\ufff1\066\ufff1\001" +
    "\002\000\042\004\uffc0\013\124\035\141\037\133\053\134" +
    "\054\153\055\135\056\126\057\147\060\157\064\146\066" +
    "\170\067\164\070\165\071\131\072\142\001\002\000\064" +
    "\004\uffc2\013\uffc2\021\uffc2\022\uffc2\025\uffc2\026\uffc2\027" +
    "\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\035\uffc2\037\uffc2" +
    "\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2\064" +
    "\uffc2\066\uffc2\067\uffc2\070\uffc2\071\uffc2\072\uffc2\001\002" +
    "\000\050\004\uff8c\011\uff8c\012\uff8c\014\uff8c\016\uff8c\036" +
    "\uff8c\037\uff8c\040\uff8c\041\uff8c\042\uff8c\043\uff8c\044\uff8c" +
    "\045\uff8c\046\uff8c\047\uff8c\050\uff8c\051\uff8c\052\uff8c\061" +
    "\uff8c\001\002\000\004\013\302\001\002\000\004\004\301" +
    "\001\002\000\064\004\uffc8\013\uffc8\021\uffc8\022\uffc8\025" +
    "\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8" +
    "\035\uffc8\037\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8\057" +
    "\uffc8\060\uffc8\064\uffc8\066\uffc8\067\uffc8\070\uffc8\071\uffc8" +
    "\072\uffc8\001\002\000\044\004\uffc1\011\177\014\uffc1\036" +
    "\202\037\174\040\206\041\204\042\201\043\211\044\203" +
    "\045\210\046\200\047\205\050\213\051\175\052\212\061" +
    "\207\001\002\000\004\013\276\001\002\000\004\013\272" +
    "\001\002\000\052\004\uffb3\011\uffb3\012\uffb3\014\uffb3\016" +
    "\uffb3\034\270\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3" +
    "\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051" +
    "\uffb3\052\uffb3\061\uffb3\001\002\000\072\004\uffcd\005\uffcd" +
    "\006\uffcd\007\uffcd\010\uffcd\013\uffcd\021\uffcd\022\uffcd\025" +
    "\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\035\uffcd" +
    "\037\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd\060" +
    "\uffcd\064\uffcd\066\uffcd\067\uffcd\070\uffcd\071\uffcd\072\uffcd" +
    "\001\002\000\004\013\265\001\002\000\062\004\uffc0\013" +
    "\124\021\116\022\uffca\025\137\027\132\030\154\031\144" +
    "\032\150\033\163\035\141\037\133\053\134\054\153\055" +
    "\135\056\126\057\147\060\157\064\146\066\170\067\164" +
    "\070\165\071\131\072\142\001\002\000\050\004\uffb1\011" +
    "\uffb1\012\uffb1\014\uffb1\016\uffb1\036\uffb1\037\uffb1\040\uffb1" +
    "\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047" +
    "\uffb1\050\uffb1\051\uffb1\052\uffb1\061\uffb1\001\002\000\064" +
    "\004\uffc5\013\uffc5\021\uffc5\022\uffc5\025\uffc5\026\uffc5\027" +
    "\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\035\uffc5\037\uffc5" +
    "\053\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5\064" +
    "\uffc5\066\uffc5\067\uffc5\070\uffc5\071\uffc5\072\uffc5\001\002" +
    "\000\004\013\166\001\002\000\050\004\uff8d\011\uff8d\012" +
    "\uff8d\014\uff8d\016\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d" +
    "\042\uff8d\043\uff8d\044\uff8d\045\uff8d\046\uff8d\047\uff8d\050" +
    "\uff8d\051\uff8d\052\uff8d\061\uff8d\001\002\000\050\004\uff90" +
    "\011\uff90\012\uff90\014\uff90\016\uff90\036\uff90\037\uff90\040" +
    "\uff90\041\uff90\042\uff90\043\uff90\044\uff90\045\uff90\046\uff90" +
    "\047\uff90\050\uff90\051\uff90\052\uff90\061\uff90\001\002\000" +
    "\040\013\124\035\141\037\133\053\134\054\153\055\135" +
    "\056\126\057\147\060\157\064\146\066\170\067\164\070" +
    "\165\071\131\072\142\001\002\000\044\011\177\014\uffb6" +
    "\016\214\036\202\037\174\040\206\041\204\042\201\043" +
    "\211\044\203\045\210\046\200\047\205\050\213\051\175" +
    "\052\212\061\207\001\002\000\054\004\uff9a\011\uff9a\012" +
    "\uff9a\013\171\014\uff9a\016\uff9a\034\uff9a\036\uff9a\037\uff9a" +
    "\040\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a\046" +
    "\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a\061\uff9a\001\002" +
    "\000\042\013\124\014\uff91\035\141\037\133\053\134\054" +
    "\153\055\135\056\126\057\147\060\157\064\146\066\170" +
    "\067\164\070\165\071\131\072\142\001\002\000\004\014" +
    "\260\001\002\000\044\011\177\014\uffb6\016\214\036\202" +
    "\037\174\040\206\041\204\042\201\043\211\044\203\045" +
    "\210\046\200\047\205\050\213\051\175\052\212\061\207" +
    "\001\002\000\040\013\124\035\141\037\133\053\134\054" +
    "\153\055\135\056\126\057\147\060\157\064\146\066\170" +
    "\067\164\070\165\071\131\072\142\001\002\000\040\013" +
    "\124\035\141\037\133\053\134\054\153\055\135\056\126" +
    "\057\147\060\157\064\146\066\170\067\164\070\165\071" +
    "\131\072\142\001\002\000\004\014\uff92\001\002\000\040" +
    "\013\124\035\141\037\133\053\134\054\153\055\135\056" +
    "\126\057\147\060\157\064\146\066\170\067\164\070\165" +
    "\071\131\072\142\001\002\000\040\013\124\035\141\037" +
    "\133\053\134\054\153\055\135\056\126\057\147\060\157" +
    "\064\146\066\170\067\164\070\165\071\131\072\142\001" +
    "\002\000\040\013\124\035\141\037\133\053\134\054\153" +
    "\055\135\056\126\057\147\060\157\064\146\066\170\067" +
    "\164\070\165\071\131\072\142\001\002\000\040\013\124" +
    "\035\141\037\133\053\134\054\153\055\135\056\126\057" +
    "\147\060\157\064\146\066\170\067\164\070\165\071\131" +
    "\072\142\001\002\000\040\013\124\035\141\037\133\053" +
    "\134\054\153\055\135\056\126\057\147\060\157\064\146" +
    "\066\170\067\164\070\165\071\131\072\142\001\002\000" +
    "\040\013\124\035\141\037\133\053\134\054\153\055\135" +
    "\056\126\057\147\060\157\064\146\066\170\067\164\070" +
    "\165\071\131\072\142\001\002\000\040\013\124\035\141" +
    "\037\133\053\134\054\153\055\135\056\126\057\147\060" +
    "\157\064\146\066\170\067\164\070\165\071\131\072\142" +
    "\001\002\000\040\013\124\035\141\037\133\053\134\054" +
    "\153\055\135\056\126\057\147\060\157\064\146\066\170" +
    "\067\164\070\165\071\131\072\142\001\002\000\010\062" +
    "\223\063\226\066\224\001\002\000\040\013\124\035\141" +
    "\037\133\053\134\054\153\055\135\056\126\057\147\060" +
    "\157\064\146\066\170\067\164\070\165\071\131\072\142" +
    "\001\002\000\040\013\124\035\141\037\133\053\134\054" +
    "\153\055\135\056\126\057\147\060\157\064\146\066\170" +
    "\067\164\070\165\071\131\072\142\001\002\000\040\013" +
    "\124\035\141\037\133\053\134\054\153\055\135\056\126" +
    "\057\147\060\157\064\146\066\170\067\164\070\165\071" +
    "\131\072\142\001\002\000\040\013\124\035\141\037\133" +
    "\053\134\054\153\055\135\056\126\057\147\060\157\064" +
    "\146\066\170\067\164\070\165\071\131\072\142\001\002" +
    "\000\040\013\124\035\141\037\133\053\134\054\153\055" +
    "\135\056\126\057\147\060\157\064\146\066\170\067\164" +
    "\070\165\071\131\072\142\001\002\000\044\011\177\014" +
    "\uffb6\016\214\036\202\037\174\040\206\041\204\042\201" +
    "\043\211\044\203\045\210\046\200\047\205\050\213\051" +
    "\175\052\212\061\207\001\002\000\004\014\uffb7\001\002" +
    "\000\034\004\uffa3\011\177\012\uffa3\014\uffa3\016\uffa3\036" +
    "\202\037\174\040\206\041\204\042\201\051\uffa3\052\uffa3" +
    "\061\207\001\002\000\050\004\uffa1\011\177\012\uffa1\014" +
    "\uffa1\016\uffa1\036\202\037\174\040\206\041\204\042\201" +
    "\043\211\044\203\045\210\046\200\047\205\050\213\051" +
    "\uffa1\052\uffa1\061\207\001\002\000\034\004\uffa8\011\177" +
    "\012\uffa8\014\uffa8\016\uffa8\036\202\037\174\040\206\041" +
    "\204\042\201\051\uffa8\052\uffa8\061\207\001\002\000\034" +
    "\004\uffa6\011\177\012\uffa6\014\uffa6\016\uffa6\036\202\037" +
    "\174\040\206\041\204\042\201\051\uffa6\052\uffa6\061\207" +
    "\001\002\000\004\013\242\001\002\000\054\004\uff99\011" +
    "\uff99\012\uff99\013\237\014\uff99\016\uff99\034\uff99\036\uff99" +
    "\037\uff99\040\uff99\041\uff99\042\uff99\043\uff99\044\uff99\045" +
    "\uff99\046\uff99\047\uff99\050\uff99\051\uff99\052\uff99\061\uff99" +
    "\001\002\000\004\013\234\001\002\000\004\013\227\001" +
    "\002\000\040\013\124\035\141\037\133\053\134\054\153" +
    "\055\135\056\126\057\147\060\157\064\146\066\170\067" +
    "\164\070\165\071\131\072\142\001\002\000\042\011\177" +
    "\016\231\036\202\037\174\040\206\041\204\042\201\043" +
    "\211\044\203\045\210\046\200\047\205\050\213\051\175" +
    "\052\212\061\207\001\002\000\040\013\124\035\141\037" +
    "\133\053\134\054\153\055\135\056\126\057\147\060\157" +
    "\064\146\066\170\067\164\070\165\071\131\072\142\001" +
    "\002\000\042\011\177\014\233\036\202\037\174\040\206" +
    "\041\204\042\201\043\211\044\203\045\210\046\200\047" +
    "\205\050\213\051\175\052\212\061\207\001\002\000\004" +
    "\013\uff93\001\002\000\042\013\124\014\uff91\035\141\037" +
    "\133\053\134\054\153\055\135\056\126\057\147\060\157" +
    "\064\146\066\170\067\164\070\165\071\131\072\142\001" +
    "\002\000\004\014\236\001\002\000\050\004\uff95\011\uff95" +
    "\012\uff95\014\uff95\016\uff95\036\uff95\037\uff95\040\uff95\041" +
    "\uff95\042\uff95\043\uff95\044\uff95\045\uff95\046\uff95\047\uff95" +
    "\050\uff95\051\uff95\052\uff95\061\uff95\001\002\000\042\013" +
    "\124\014\uff91\035\141\037\133\053\134\054\153\055\135" +
    "\056\126\057\147\060\157\064\146\066\170\067\164\070" +
    "\165\071\131\072\142\001\002\000\004\014\241\001\002" +
    "\000\050\004\uff96\011\uff96\012\uff96\014\uff96\016\uff96\036" +
    "\uff96\037\uff96\040\uff96\041\uff96\042\uff96\043\uff96\044\uff96" +
    "\045\uff96\046\uff96\047\uff96\050\uff96\051\uff96\052\uff96\061" +
    "\uff96\001\002\000\040\013\124\035\141\037\133\053\134" +
    "\054\153\055\135\056\126\057\147\060\157\064\146\066" +
    "\170\067\164\070\165\071\131\072\142\001\002\000\042" +
    "\011\177\014\244\036\202\037\174\040\206\041\204\042" +
    "\201\043\211\044\203\045\210\046\200\047\205\050\213" +
    "\051\175\052\212\061\207\001\002\000\004\013\uff94\001" +
    "\002\000\050\004\uffac\011\177\012\uffac\014\uffac\016\uffac" +
    "\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044" +
    "\uffac\045\uffac\046\uffac\047\uffac\050\uffac\051\uffac\052\uffac" +
    "\061\207\001\002\000\034\004\uffa4\011\177\012\uffa4\014" +
    "\uffa4\016\uffa4\036\202\037\174\040\206\041\204\042\201" +
    "\051\uffa4\052\uffa4\061\207\001\002\000\050\004\uffab\011" +
    "\177\012\uffab\014\uffab\016\uffab\036\uffab\037\uffab\040\uffab" +
    "\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab\046\uffab\047" +
    "\uffab\050\uffab\051\uffab\052\uffab\061\207\001\002\000\034" +
    "\004\uffa7\011\177\012\uffa7\014\uffa7\016\uffa7\036\202\037" +
    "\174\040\206\041\204\042\201\051\uffa7\052\uffa7\061\207" +
    "\001\002\000\050\004\uffae\011\177\012\uffae\014\uffae\016" +
    "\uffae\036\uffae\037\uffae\040\206\041\204\042\201\043\uffae" +
    "\044\uffae\045\uffae\046\uffae\047\uffae\050\uffae\051\uffae\052" +
    "\uffae\061\207\001\002\000\050\004\uffaa\011\177\012\uffaa" +
    "\014\uffaa\016\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042" +
    "\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa" +
    "\051\uffaa\052\uffaa\061\207\001\002\000\034\004\uffa5\011" +
    "\177\012\uffa5\014\uffa5\016\uffa5\036\202\037\174\040\206" +
    "\041\204\042\201\051\uffa5\052\uffa5\061\207\001\002\000" +
    "\042\011\177\012\255\036\202\037\174\040\206\041\204" +
    "\042\201\043\211\044\203\045\210\046\200\047\205\050" +
    "\213\051\175\052\212\061\207\001\002\000\052\004\uff98" +
    "\011\uff98\012\uff98\014\uff98\016\uff98\034\uff98\036\uff98\037" +
    "\uff98\040\uff98\041\uff98\042\uff98\043\uff98\044\uff98\045\uff98" +
    "\046\uff98\047\uff98\050\uff98\051\uff98\052\uff98\061\uff98\001" +
    "\002\000\050\004\uffa2\011\177\012\uffa2\014\uffa2\016\uffa2" +
    "\036\202\037\174\040\206\041\204\042\201\043\211\044" +
    "\203\045\210\046\200\047\205\050\213\051\uffa2\052\uffa2" +
    "\061\207\001\002\000\050\004\uffad\011\177\012\uffad\014" +
    "\uffad\016\uffad\036\uffad\037\uffad\040\206\041\204\042\201" +
    "\043\uffad\044\uffad\045\uffad\046\uffad\047\uffad\050\uffad\051" +
    "\uffad\052\uffad\061\207\001\002\000\050\004\uff97\011\uff97" +
    "\012\uff97\014\uff97\016\uff97\036\uff97\037\uff97\040\uff97\041" +
    "\uff97\042\uff97\043\uff97\044\uff97\045\uff97\046\uff97\047\uff97" +
    "\050\uff97\051\uff97\052\uff97\061\uff97\001\002\000\004\014" +
    "\262\001\002\000\004\004\263\001\002\000\064\004\uffb8" +
    "\013\uffb8\021\uffb8\022\uffb8\025\uffb8\026\uffb8\027\uffb8\030" +
    "\uffb8\031\uffb8\032\uffb8\033\uffb8\035\uffb8\037\uffb8\053\uffb8" +
    "\054\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\064\uffb8\066" +
    "\uffb8\067\uffb8\070\uffb8\071\uffb8\072\uffb8\001\002\000\004" +
    "\022\uffcb\001\002\000\040\013\124\035\141\037\133\053" +
    "\134\054\153\055\135\056\126\057\147\060\157\064\146" +
    "\066\170\067\164\070\165\071\131\072\142\001\002\000" +
    "\042\011\177\014\267\036\202\037\174\040\206\041\204" +
    "\042\201\043\211\044\203\045\210\046\200\047\205\050" +
    "\213\051\175\052\212\061\207\001\002\000\050\004\uff9b" +
    "\011\uff9b\012\uff9b\014\uff9b\016\uff9b\036\uff9b\037\uff9b\040" +
    "\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b" +
    "\047\uff9b\050\uff9b\051\uff9b\052\uff9b\061\uff9b\001\002\000" +
    "\040\013\124\035\141\037\133\053\134\054\153\055\135" +
    "\056\126\057\147\060\157\064\146\066\170\067\164\070" +
    "\165\071\131\072\142\001\002\000\050\004\uffb5\011\177" +
    "\012\uffb5\014\uffb5\016\uffb5\036\202\037\174\040\206\041" +
    "\204\042\201\043\211\044\203\045\210\046\200\047\205" +
    "\050\213\051\175\052\212\061\207\001\002\000\040\013" +
    "\124\035\141\037\133\053\134\054\153\055\135\056\126" +
    "\057\147\060\157\064\146\066\170\067\164\070\165\071" +
    "\131\072\142\001\002\000\042\011\177\014\274\036\202" +
    "\037\174\040\206\041\204\042\201\043\211\044\203\045" +
    "\210\046\200\047\205\050\213\051\175\052\212\061\207" +
    "\001\002\000\060\004\uffc0\013\124\021\116\025\137\027" +
    "\132\030\154\031\144\032\150\033\163\035\141\037\133" +
    "\053\134\054\153\055\135\056\126\057\147\060\157\064" +
    "\146\066\170\067\164\070\165\071\131\072\142\001\002" +
    "\000\064\004\uffbc\013\uffbc\021\uffbc\022\uffbc\025\uffbc\026" +
    "\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\035\uffbc" +
    "\037\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\060" +
    "\uffbc\064\uffbc\066\uffbc\067\uffbc\070\uffbc\071\uffbc\072\uffbc" +
    "\001\002\000\004\066\277\001\002\000\004\014\300\001" +
    "\002\000\050\004\uff9f\011\uff9f\012\uff9f\014\uff9f\016\uff9f" +
    "\036\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044" +
    "\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f" +
    "\061\uff9f\001\002\000\064\004\uffb9\013\uffb9\021\uffb9\022" +
    "\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9" +
    "\033\uffb9\035\uffb9\037\uffb9\053\uffb9\054\uffb9\055\uffb9\056" +
    "\uffb9\057\uffb9\060\uffb9\064\uffb9\066\uffb9\067\uffb9\070\uffb9" +
    "\071\uffb9\072\uffb9\001\002\000\004\014\303\001\002\000" +
    "\050\004\uff9c\011\uff9c\012\uff9c\014\uff9c\016\uff9c\036\uff9c" +
    "\037\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\045" +
    "\uff9c\046\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c\061\uff9c" +
    "\001\002\000\004\004\305\001\002\000\064\004\uffba\013" +
    "\uffba\021\uffba\022\uffba\025\uffba\026\uffba\027\uffba\030\uffba" +
    "\031\uffba\032\uffba\033\uffba\035\uffba\037\uffba\053\uffba\054" +
    "\uffba\055\uffba\056\uffba\057\uffba\060\uffba\064\uffba\066\uffba" +
    "\067\uffba\070\uffba\071\uffba\072\uffba\001\002\000\106\002" +
    "\uffce\003\uffce\004\uffce\005\uffce\006\uffce\007\uffce\010\uffce" +
    "\013\uffce\015\uffce\017\uffce\021\uffce\022\uffce\024\uffce\025" +
    "\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce" +
    "\035\uffce\037\uffce\053\uffce\054\uffce\055\uffce\056\uffce\057" +
    "\uffce\060\uffce\064\uffce\066\uffce\067\uffce\070\uffce\071\uffce" +
    "\072\uffce\001\002\000\040\013\124\035\141\037\133\053" +
    "\134\054\153\055\135\056\126\057\147\060\157\064\146" +
    "\066\170\067\164\070\165\071\131\072\142\001\002\000" +
    "\042\011\177\014\311\036\202\037\174\040\206\041\204" +
    "\042\201\043\211\044\203\045\210\046\200\047\205\050" +
    "\213\051\175\052\212\061\207\001\002\000\060\004\uffc0" +
    "\013\124\021\116\025\137\027\132\030\154\031\144\032" +
    "\150\033\163\035\141\037\133\053\134\054\153\055\135" +
    "\056\126\057\147\060\157\064\146\066\170\067\164\070" +
    "\165\071\131\072\142\001\002\000\064\004\uffbd\013\uffbd" +
    "\021\uffbd\022\uffbd\025\uffbd\026\314\027\uffbd\030\uffbd\031" +
    "\uffbd\032\uffbd\033\uffbd\035\uffbd\037\uffbd\053\uffbd\054\uffbd" +
    "\055\uffbd\056\uffbd\057\uffbd\060\uffbd\064\uffbd\066\uffbd\067" +
    "\uffbd\070\uffbd\071\uffbd\072\uffbd\001\002\000\064\004\uffbf" +
    "\013\uffbf\021\uffbf\022\uffbf\025\uffbf\026\uffbf\027\uffbf\030" +
    "\uffbf\031\uffbf\032\uffbf\033\uffbf\035\uffbf\037\uffbf\053\uffbf" +
    "\054\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf\064\uffbf\066" +
    "\uffbf\067\uffbf\070\uffbf\071\uffbf\072\uffbf\001\002\000\060" +
    "\004\uffc0\013\124\021\116\025\137\027\132\030\154\031" +
    "\144\032\150\033\163\035\141\037\133\053\134\054\153" +
    "\055\135\056\126\057\147\060\157\064\146\066\170\067" +
    "\164\070\165\071\131\072\142\001\002\000\064\004\uffbe" +
    "\013\uffbe\021\uffbe\022\uffbe\025\uffbe\026\uffbe\027\uffbe\030" +
    "\uffbe\031\uffbe\032\uffbe\033\uffbe\035\uffbe\037\uffbe\053\uffbe" +
    "\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\064\uffbe\066" +
    "\uffbe\067\uffbe\070\uffbe\071\uffbe\072\uffbe\001\002\000\040" +
    "\013\124\035\141\037\133\053\134\054\153\055\135\056" +
    "\126\057\147\060\157\064\146\066\170\067\164\070\165" +
    "\071\131\072\142\001\002\000\042\011\177\016\320\036" +
    "\202\037\174\040\206\041\204\042\201\043\211\044\203" +
    "\045\210\046\200\047\205\050\213\051\175\052\212\061" +
    "\207\001\002\000\014\005\024\006\016\007\021\010\005" +
    "\066\014\001\002\000\006\014\322\065\077\001\002\000" +
    "\050\004\uff9e\011\uff9e\012\uff9e\014\uff9e\016\uff9e\036\uff9e" +
    "\037\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045" +
    "\uff9e\046\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e\061\uff9e" +
    "\001\002\000\050\004\uffa0\011\177\012\uffa0\014\uffa0\016" +
    "\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0" +
    "\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052" +
    "\uffa0\061\207\001\002\000\050\004\uffa9\011\177\012\uffa9" +
    "\014\uffa9\016\uffa9\036\uffa9\037\uffa9\040\206\041\204\042" +
    "\201\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9" +
    "\051\uffa9\052\uffa9\061\207\001\002\000\042\004\uffc0\013" +
    "\124\035\141\037\133\053\134\054\153\055\135\056\126" +
    "\057\147\060\157\064\146\066\170\067\164\070\165\071" +
    "\131\072\142\001\002\000\004\004\327\001\002\000\040" +
    "\013\124\035\141\037\133\053\134\054\153\055\135\056" +
    "\126\057\147\060\157\064\146\066\170\067\164\070\165" +
    "\071\131\072\142\001\002\000\042\004\331\011\177\036" +
    "\202\037\174\040\206\041\204\042\201\043\211\044\203" +
    "\045\210\046\200\047\205\050\213\051\175\052\212\061" +
    "\207\001\002\000\042\013\124\014\uffc0\035\141\037\133" +
    "\053\134\054\153\055\135\056\126\057\147\060\157\064" +
    "\146\066\170\067\164\070\165\071\131\072\142\001\002" +
    "\000\004\014\333\001\002\000\060\004\uffc0\013\124\021" +
    "\116\025\137\027\132\030\154\031\144\032\150\033\163" +
    "\035\141\037\133\053\134\054\153\055\135\056\126\057" +
    "\147\060\157\064\146\066\170\067\164\070\165\071\131" +
    "\072\142\001\002\000\064\004\uffbb\013\uffbb\021\uffbb\022" +
    "\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb" +
    "\033\uffbb\035\uffbb\037\uffbb\053\uffbb\054\uffbb\055\uffbb\056" +
    "\uffbb\057\uffbb\060\uffbb\064\uffbb\066\uffbb\067\uffbb\070\uffbb" +
    "\071\uffbb\072\uffbb\001\002\000\004\014\336\001\002\000" +
    "\050\004\uff9d\011\uff9d\012\uff9d\014\uff9d\016\uff9d\036\uff9d" +
    "\037\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d\045" +
    "\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d\052\uff9d\061\uff9d" +
    "\001\002\000\042\011\177\014\uffb0\036\202\037\174\040" +
    "\206\041\204\042\201\043\211\044\203\045\210\046\200" +
    "\047\205\050\213\051\175\052\212\061\207\001\002\000" +
    "\004\014\341\001\002\000\050\004\uffaf\011\uffaf\012\uffaf" +
    "\014\uffaf\016\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042" +
    "\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf" +
    "\051\uffaf\052\uffaf\061\uffaf\001\002\000\064\004\uffc9\013" +
    "\uffc9\021\uffc9\022\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9" +
    "\031\uffc9\032\uffc9\033\uffc9\035\uffc9\037\uffc9\053\uffc9\054" +
    "\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9\064\uffc9\066\uffc9" +
    "\067\uffc9\070\uffc9\071\uffc9\072\uffc9\001\002\000\004\002" +
    "\001\001\002\000\104\002\ufff7\003\ufff7\004\ufff7\005\ufff7" +
    "\006\ufff7\007\ufff7\010\ufff7\013\ufff7\015\ufff7\017\ufff7\021" +
    "\ufff7\022\ufff7\024\ufff7\025\ufff7\027\ufff7\030\ufff7\031\ufff7" +
    "\032\ufff7\033\ufff7\035\ufff7\037\ufff7\053\ufff7\054\ufff7\055" +
    "\ufff7\056\ufff7\057\ufff7\060\ufff7\064\ufff7\066\ufff7\067\ufff7" +
    "\070\ufff7\071\ufff7\072\ufff7\001\002\000\026\002\ufffe\003" +
    "\017\005\024\006\016\007\021\010\005\015\013\017\023" +
    "\024\020\066\014\001\002\000\004\002\000\001\002\000" +
    "\004\002\uffff\001\002\000\006\004\ufff6\013\uffef\001\002" +
    "\000\004\013\352\001\002\000\016\005\uffee\006\uffee\007" +
    "\uffee\010\uffee\014\uffee\066\uffee\001\002\000\016\005\024" +
    "\006\016\007\021\010\005\014\uffe6\066\014\001\002\000" +
    "\004\014\355\001\002\000\004\021\uffed\001\002\000\004" +
    "\021\116\001\002\000\030\002\uffec\003\uffec\005\uffec\006" +
    "\uffec\007\uffec\010\uffec\015\uffec\017\uffec\022\uffec\024\uffec" +
    "\066\uffec\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\355\000\022\002\011\003\007\004\006\005\010\006" +
    "\003\007\021\011\014\013\005\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\003\344\004\006\005\010\006\003\007\021\011\014" +
    "\013\005\033\345\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\055\025\001\001\000\004\035\027\001" +
    "\001\000\002\001\001\000\004\036\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\056\033\001\001\000" +
    "\016\004\034\005\010\006\003\007\037\012\035\040\036" +
    "\001\001\000\002\001\001\000\016\004\034\005\010\006" +
    "\003\007\037\012\035\040\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\037\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\057\051\001\001\000\002\001\001\000\004" +
    "\060\053\001\001\000\010\006\054\014\057\041\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\006\054\014\057\041\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\065" +
    "\006\064\010\066\001\001\000\002\001\001\000\004\034" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\073\006\064\001\001\000\002\001" +
    "\001\000\004\034\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\065\006\064\010\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\052\107\001\001\000\002\001\001\000\004" +
    "\053\111\001\001\000\010\005\065\006\064\010\112\001" +
    "\001\000\004\054\113\001\001\000\002\001\001\000\004" +
    "\015\116\001\001\000\004\061\117\001\001\000\002\001" +
    "\001\000\004\042\120\001\001\000\044\004\155\005\010" +
    "\006\064\015\144\016\157\017\150\020\135\021\126\022" +
    "\121\023\161\024\127\025\151\026\154\027\160\032\124" +
    "\043\137\044\122\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\025\336\026\154\027\160\032\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\025\323\026\154\027\160\032\124\001\001\000\012\025" +
    "\322\026\154\027\160\032\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\025\151\026\154\027\160\032\124\044\303\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\015\144\016\157\017\150\020" +
    "\135\021\126\022\121\023\161\024\127\025\151\026\154" +
    "\027\160\032\124\043\263\044\122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\025\166\026\154\027\160\032" +
    "\124\001\001\000\004\045\260\001\001\000\002\001\001" +
    "\000\014\025\172\026\154\027\160\031\171\032\124\001" +
    "\001\000\002\001\001\000\004\045\175\001\001\000\012" +
    "\025\256\026\154\027\160\032\124\001\001\000\012\025" +
    "\255\026\154\027\160\032\124\001\001\000\002\001\001" +
    "\000\012\025\253\026\154\027\160\032\124\001\001\000" +
    "\012\025\252\026\154\027\160\032\124\001\001\000\012" +
    "\025\251\026\154\027\160\032\124\001\001\000\012\025" +
    "\250\026\154\027\160\032\124\001\001\000\012\025\247" +
    "\026\154\027\160\032\124\001\001\000\012\025\246\026" +
    "\154\027\160\032\124\001\001\000\012\025\245\026\154" +
    "\027\160\032\124\001\001\000\012\025\244\026\154\027" +
    "\160\032\124\001\001\000\004\030\224\001\001\000\012" +
    "\025\221\026\154\027\160\032\124\001\001\000\012\025" +
    "\220\026\154\027\160\032\124\001\001\000\012\025\217" +
    "\026\154\027\160\032\124\001\001\000\012\025\216\026" +
    "\154\027\160\032\124\001\001\000\012\025\214\026\154" +
    "\027\160\032\124\001\001\000\004\045\215\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\025\227" +
    "\026\154\027\160\032\124\001\001\000\002\001\001\000" +
    "\012\025\231\026\154\027\160\032\124\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\025\172\026\154\027" +
    "\160\031\234\032\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\025\172\026\154\027\160\031\237\032" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\025\242\026\154\027\160\032\124\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\025\265\026\154\027\160\032" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\025\270\026\154\027\160\032\124\001\001\000\002\001" +
    "\001\000\012\025\272\026\154\027\160\032\124\001\001" +
    "\000\002\001\001\000\034\015\144\016\274\017\150\020" +
    "\135\021\126\022\121\023\161\024\127\025\151\026\154" +
    "\027\160\032\124\044\122\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\025\307" +
    "\026\154\027\160\032\124\001\001\000\002\001\001\000" +
    "\034\015\144\016\311\017\150\020\135\021\126\022\121" +
    "\023\161\024\127\025\151\026\154\027\160\032\124\044" +
    "\122\001\001\000\004\046\312\001\001\000\002\001\001" +
    "\000\034\015\144\016\314\017\150\020\135\021\126\022" +
    "\121\023\161\024\127\025\151\026\154\027\160\032\124" +
    "\044\122\001\001\000\002\001\001\000\012\025\316\026" +
    "\154\027\160\032\124\001\001\000\002\001\001\000\004" +
    "\006\320\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\025\151\026\154" +
    "\027\160\032\124\044\325\001\001\000\002\001\001\000" +
    "\012\025\327\026\154\027\160\032\124\001\001\000\002" +
    "\001\001\000\014\025\151\026\154\027\160\032\124\044" +
    "\331\001\001\000\002\001\001\000\034\015\144\016\333" +
    "\017\150\020\135\021\126\022\121\023\161\024\127\025" +
    "\151\026\154\027\160\032\124\044\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\062" +
    "\337\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\344\004\006\005\010\006\003\007\021\011\014\013\005" +
    "\033\346\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\047\350\001\001\000\002\001\001\000\004\050\352" +
    "\001\001\000\010\005\065\006\064\010\353\001\001\000" +
    "\002\001\001\000\004\051\355\001\001\000\004\015\356" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$RulesSS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$RulesSS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$RulesSS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public String listOfErrors ="";
    public String bitacora1 = "";
    public void syntax_error(Symbol s){
		report_error("Error de sintaxis. Línea: " + (s.right + 1) +
		" Columna: " + (s.left +1) + ". Texto: \"" + s.value + "\"", null);
            listOfErrors+="Línea: " + (s.right + 1) +
		" Columna: " + s.left + " Error de sintaxis. Texto: \"" + s.value + "\""+"\r\n";
	}
        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception 
        {
            report_fatal_error("Fatal Error: " + s.value, null);
        }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$RulesSS$actions {


      tableOfSymbols table = new tableOfSymbols();
      public String ambit = "";
      LinkedList<String> ambits =  new LinkedList<String>();
      boolean isParameter = false;
      String typeStmt = "noName";

      public String getType (Object obj){
    Integer temp;
    if (obj instanceof Integer)
        return "int";
    else if (obj instanceof Double)
        return "double";
    else if (obj instanceof String)
        return "string";
    else if (obj instanceof Boolean)
        return "boolean";
    else 
        return "n";
  }  

  private final RulesSS parser;

  /** Constructor */
  CUP$RulesSS$actions(RulesSS parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$RulesSS$do_action(
    int                        CUP$RulesSS$act_num,
    java_cup.runtime.lr_parser CUP$RulesSS$parser,
    java.util.Stack            CUP$RulesSS$stack,
    int                        CUP$RulesSS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$RulesSS$result;

      /* select the action based on the action number */
      switch (CUP$RulesSS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Constant ::= NULL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.peek()).value;
		RESULT = i;
              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Constant",24, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Constant ::= stringConstants 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$RulesSS$stack.peek()).value;
		RESULT = i;
              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Constant",24, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Constant ::= booleanConstants 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).right;
		boolean i = (boolean)((java_cup.runtime.Symbol) CUP$RulesSS$stack.peek()).value;
		RESULT = i;
              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Constant",24, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Constant ::= doubleConstants 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).right;
		double i = (double)((java_cup.runtime.Symbol) CUP$RulesSS$stack.peek()).value;
		RESULT = i;
              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Constant",24, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Constant ::= integerConstants 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).right;
		int i = (int)((java_cup.runtime.Symbol) CUP$RulesSS$stack.peek()).value;
		RESULT = i;
              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Constant",24, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Actuals ::= 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Actuals",23, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Actuals ::= Expr ExprLR 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Actuals",23, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-1)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // LibCall ::= SETBYTE_M lParenthesis Expr comma Expr rParenthesis 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("LibCall",22, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-5)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // LibCall ::= GETBYTE_M lParenthesis Expr rParenthesis 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("LibCall",22, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-3)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Call ::= Expr point LibCall lParenthesis Actuals rParenthesis 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Call",21, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-5)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Call ::= Expr point ident lParenthesis Actuals rParenthesis 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Call",21, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-5)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Call ::= ident lParenthesis Actuals rParenthesis 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Call",21, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-3)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // LValue ::= Expr lBracket Expr rBracket 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("LValue",20, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-3)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // LValue ::= Expr point ident 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("LValue",20, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // LValue ::= ident 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$RulesSS$stack.peek()).value;
		RESULT = i;
              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("LValue",20, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Expr ::= MALLOC_KW lParenthesis Expr rParenthesis 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-3)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Expr ::= READLINE_KW lParenthesis rParenthesis 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Expr ::= READINT_KW lParenthesis rParenthesis 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Expr ::= NEWARRAY_KW lParenthesis Expr comma Type rParenthesis 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-5)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Expr ::= NEW_KW lParenthesis ident rParenthesis 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-3)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Expr ::= NOT Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.peek()).value;
		 if(e != null ){
                                                      ObjectS aux1 = new ObjectS();
                                                      aux1.name = String.valueOf(e);
                                                      ObjectS type1 = table.getSymbolS(aux1, ambits);
                                                      if ((type1.type.equals("bool")))
                                                            RESULT = (Object) (!(((String.valueOf(type1.val))).equals(String.valueOf((type1.val)))));
                                                      else
                                                      {
                                                            table.addToLog("No se puede operar " + type1.type);
                                                      }              
                                                }
              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-1)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Expr ::= Expr OR Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.peek()).value;
		 if(e1 != null && e2 != null){
                                                      ObjectS aux1 = new ObjectS();
                                                      aux1.name = String.valueOf(e1);
                                                      ObjectS aux2 = new ObjectS();
                                                      aux2.name = String.valueOf(e2);
                                                      ObjectS type1 = table.getSymbolS(aux1, ambits);
                                                      ObjectS type2 = table.getSymbolS(aux2, ambits);
                                                      if ((type1.type.equals(type2.type) && type1.type.equals("bool")))
                                                            RESULT = (Object) (((Boolean.parseBoolean(type1.val))) || ((Boolean.parseBoolean(type2.val))));
                                                      else
                                                      {
                                                            table.addToLog("No se puede operar " + type1.type + " con " + type2.type);
                                                      }               
                                                }
              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expr ::= Expr AND Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.peek()).value;
		 if(e1 != null && e2 != null){
                                                      ObjectS aux1 = new ObjectS();
                                                      aux1.name = String.valueOf(e1);
                                                      ObjectS aux2 = new ObjectS();
                                                      aux2.name = String.valueOf(e2);
                                                      ObjectS type1 = table.getSymbolS(aux1, ambits);
                                                      ObjectS type2 = table.getSymbolS(aux2, ambits);
                                                      if ((type1.type.equals(type2.type) && type1.type.equals("bool")))
                                                            RESULT = (Object) (((Boolean.parseBoolean(type1.val))) && ((Boolean.parseBoolean(type2.val))));
                                                      else
                                                      {
                                                            table.addToLog("No se puede operar " + type1.type + " con " + type2.type);
                                                      }               
                                                }
              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expr ::= Expr NOEQUAL Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.peek()).value;
		 if(e1 != null && e2 != null){
                                                      ObjectS aux1 = new ObjectS();
                                                      aux1.name = String.valueOf(e1);
                                                      ObjectS aux2 = new ObjectS();
                                                      aux2.name = String.valueOf(e2);
                                                      ObjectS type1 = table.getSymbolS(aux1, ambits);
                                                      ObjectS type2 = table.getSymbolS(aux2, ambits);
                                                      if ((type1.type.equals(type2.type) && type1.type.equals("int")))
                                                            RESULT = (Object) ((Integer.parseInt(String.valueOf(type1.val))) != Integer.parseInt((String.valueOf(type2.val))));
                                                      else if((type1.type.equals(type2.type) && type1.type.equals("string")))
                                                      {
                                                            RESULT = (Object) (!(((String.valueOf(type1.val))).equals(String.valueOf((type2.val)))));
                                                      }
                                                      else if((type1.type.equals(type2.type) && type1.type.equals("bool")))
                                                      {
                                                            RESULT = (Object) (!(((String.valueOf(type1.val))).equals(String.valueOf((type2.val)))));
                                                      }
                                                      else
                                                      {
                                                            if((type1.type.equals("int") && type2.type.equals("double")) || (type1.type.equals("double") && type2.type.equals("int")))
                                                                  RESULT = (Object) ((Double.parseDouble(String.valueOf(type1.val))) != Double.parseDouble((String.valueOf(type2.val))));
                                                            else
                                                                  table.addToLog("No se puede operar " + type1.type + " con " + type2.type);
                                                      }               
                                                }
              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expr ::= Expr EQUALTO Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.peek()).value;
		 if(e1 != null && e2 != null){
                                                      ObjectS aux1 = new ObjectS();
                                                      aux1.name = String.valueOf(e1);
                                                      ObjectS aux2 = new ObjectS();
                                                      aux2.name = String.valueOf(e2);
                                                      ObjectS type1 = table.getSymbolS(aux1, ambits);
                                                      ObjectS type2 = table.getSymbolS(aux2, ambits);
                                                      if ((type1.type.equals(type2.type) && type1.type.equals("int")))
                                                            RESULT = (Object) ((Integer.parseInt(String.valueOf(type1.val))) == Integer.parseInt((String.valueOf(type2.val))));
                                                      else if((type1.type.equals(type2.type) && type1.type.equals("string")))
                                                      {
                                                            RESULT = (Object) (((String.valueOf(type1.val))).equals(String.valueOf((type2.val))));
                                                      }
                                                      else if((type1.type.equals(type2.type) && type1.type.equals("bool")))
                                                      {
                                                            RESULT = (Object) ((((String.valueOf(type1.val))).equals(String.valueOf((type2.val)))));
                                                      }
                                                      else
                                                      {
                                                            if((type1.type.equals("int") && type2.type.equals("double")) || (type1.type.equals("double") && type2.type.equals("int")))
                                                                  RESULT = (Object) ((Double.parseDouble(String.valueOf(type1.val))) == Double.parseDouble((String.valueOf(type2.val))));
                                                            else
                                                                  table.addToLog("No se puede operar " + type1.type + " con " + type2.type);
                                                      }               
                                                }
              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= Expr MORETE Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.peek()).value;
		 if(e1 != null && e2 != null){
                                                      ObjectS aux1 = new ObjectS();
                                                      aux1.name = String.valueOf(e1);
                                                      ObjectS aux2 = new ObjectS();
                                                      aux2.name = String.valueOf(e2);
                                                      ObjectS type1 = table.getSymbolS(aux1, ambits);
                                                      ObjectS type2 = table.getSymbolS(aux2, ambits);
                                                      if ((type1.type.equals(type2.type) && type1.type.equals("int")))
                                                            RESULT = (Object) ((Integer.parseInt(String.valueOf(type1.val))) >= Integer.parseInt((String.valueOf(type2.val))));
                                                      else
                                                      {
                                                            if((type1.type.equals("int") && type2.type.equals("double")) || (type1.type.equals("double") && type2.type.equals("int")))
                                                                  RESULT = (Object) ((Double.parseDouble(String.valueOf(type1.val))) >= Double.parseDouble((String.valueOf(type2.val))));
                                                            else
                                                                  table.addToLog("No se puede operar " + type1.type + " con " + type2.type);
                                                      }               
                                                }
              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= Expr MORET Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.peek()).value;
		 if(e1 != null && e2 != null){
                                                      ObjectS aux1 = new ObjectS();
                                                      aux1.name = String.valueOf(e1);
                                                      ObjectS aux2 = new ObjectS();
                                                      aux2.name = String.valueOf(e2);
                                                      ObjectS type1 = table.getSymbolS(aux1, ambits);
                                                      ObjectS type2 = table.getSymbolS(aux2, ambits);
                                                      if ((type1.type.equals(type2.type) && type1.type.equals("int")))
                                                            RESULT = (Object) (Boolean.valueOf((Integer.parseInt(String.valueOf(type1.val)))>Integer.parseInt((String.valueOf(type2.val)))));
                                                      else
                                                      {
                                                            if((type1.type.equals("int") && type2.type.equals("double")) || (type1.type.equals("double") && type2.type.equals("int")))
                                                                  RESULT = (Object) ((Double.parseDouble(String.valueOf(type1.val)))>Double.parseDouble((String.valueOf(type2.val))));
                                                            else
                                                                  table.addToLog("No se puede operar " + type1.type + " con " + type2.type);
                                                      }               
                                                }
              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= Expr LESSTE Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.peek()).value;
		 if(e1 != null && e2 != null){
                                                      ObjectS aux1 = new ObjectS();
                                                      aux1.name = String.valueOf(e1);
                                                      ObjectS aux2 = new ObjectS();
                                                      aux2.name = String.valueOf(e2);
                                                      ObjectS type1 = table.getSymbolS(aux1, ambits);
                                                      ObjectS type2 = table.getSymbolS(aux2, ambits);
                                                      if ((type1.type.equals(type2.type) && type1.type.equals("int")))
                                                            RESULT = (Object) ((Integer.parseInt(String.valueOf(type1.val))) <= Integer.parseInt((String.valueOf(type2.val))));
                                                      else
                                                      {
                                                            if((type1.type.equals("int") && type2.type.equals("double")) || (type1.type.equals("double") && type2.type.equals("int")))
                                                                  RESULT = (Object) ((Double.parseDouble(String.valueOf(type1.val))) <= Double.parseDouble((String.valueOf(type2.val))));
                                                            else
                                                                  table.addToLog("No se puede operar " + type1.type + " con " + type2.type);
                                                      }               
                                                }
              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= Expr LESST Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.peek()).value;
		 if(e1 != null && e2 != null){
                                                      ObjectS aux1 = new ObjectS();
                                                      aux1.name = String.valueOf(e1);
                                                      ObjectS aux2 = new ObjectS();
                                                      aux2.name = String.valueOf(e2);
                                                      ObjectS type1 = table.getSymbolS(aux1, ambits);
                                                      ObjectS type2 = table.getSymbolS(aux2, ambits);
                                                      if ((type1.type.equals(type2.type) && type1.type.equals("int")))
                                                            RESULT = (Object) ((Integer.parseInt(String.valueOf(type1.val))) < Integer.parseInt((String.valueOf(type2.val))));
                                                      else
                                                      {
                                                            if((type1.type.equals("int") && type2.type.equals("double")) || (type1.type.equals("double") && type2.type.equals("int")))
                                                                  RESULT = (Object) ((Double.parseDouble(String.valueOf(type1.val))) < Double.parseDouble((String.valueOf(type2.val))));
                                                            else
                                                                  table.addToLog("No se puede operar " + type1.type + " con " + type2.type);
                                                      }               
                                                }
              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= MINUS Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.peek()).value;
		 if(e != null ){
                                                      ObjectS aux1 = new ObjectS();
                                                      aux1.name = String.valueOf(e);
                                                      ObjectS type1 = table.getSymbolS(aux1, ambits);
                                                      if (type1.type.equals("int"))
                                                            RESULT = (Object) ((Integer.parseInt("0")) - Integer.parseInt((String.valueOf(type1.val))));
                                                      else if (type1.type.equals("double"))
                                                            RESULT = (Object) ((Double.parseDouble("0")) - Double.parseDouble((String.valueOf(type1.val))));
                                                      else
                                                      {
                                                            table.addToLog("No se puede operar " + type1.type);
                                                      }               
                                                }
              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-1)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= Expr MOD Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.peek()).value;
		 if(e1 != null && e2 != null){
                                                      ObjectS aux1 = new ObjectS();
                                                      aux1.name = String.valueOf(e1);
                                                      ObjectS aux2 = new ObjectS();
                                                      aux2.name = String.valueOf(e2);
                                                      ObjectS type1 = table.getSymbolS(aux1, ambits);
                                                      ObjectS type2 = table.getSymbolS(aux2, ambits);
                                                      if ((type1.type.equals(type2.type) && type1.type.equals("int")))
                                                            RESULT = (Object) ((Integer.parseInt(String.valueOf(type1.val))) % Integer.parseInt((String.valueOf(type2.val))));
                                                      else
                                                      {
                                                            if((type1.type.equals("int") && type2.type.equals("double")) || (type1.type.equals("double") && type2.type.equals("int")))
                                                                  RESULT = (Object) ((Double.parseDouble(String.valueOf(type1.val))) % Double.parseDouble((String.valueOf(type2.val))));
                                                            else
                                                                  table.addToLog("No se puede operar " + type1.type + " con " + type2.type);
                                                      }               
                                                }
              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= Expr DIV Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.peek()).value;
		 if(e1 != null && e2 != null){
                                                      ObjectS aux1 = new ObjectS();
                                                      aux1.name = String.valueOf(e1);
                                                      ObjectS aux2 = new ObjectS();
                                                      aux2.name = String.valueOf(e2);
                                                      ObjectS type1 = table.getSymbolS(aux1, ambits);
                                                      ObjectS type2 = table.getSymbolS(aux2, ambits);
                                                      if ((type1.type.equals(type2.type) && type1.type.equals("int")))
                                                            RESULT = (Object) ((Integer.parseInt(String.valueOf(type1.val))) / Integer.parseInt((String.valueOf(type2.val))));
                                                      else
                                                      {
                                                            if((type1.type.equals("int") && type2.type.equals("double")) || (type1.type.equals("double") && type2.type.equals("int")))
                                                                  RESULT = (Object) ((Double.parseDouble(String.valueOf(type1.val))) / Double.parseDouble((String.valueOf(type2.val))));
                                                            else
                                                                  table.addToLog("No se puede operar " + type1.type + " con " + type2.type);
                                                      }               
                                                }
              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= Expr TIMES Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.peek()).value;
		 if(e1 != null && e2 != null){
                                                      ObjectS aux1 = new ObjectS();
                                                      aux1.name = String.valueOf(e1);
                                                      ObjectS aux2 = new ObjectS();
                                                      aux2.name = String.valueOf(e2);
                                                      ObjectS type1 = table.getSymbolS(aux1, ambits);
                                                      ObjectS type2 = table.getSymbolS(aux2, ambits);
                                                      if ((type1.type.equals(type2.type) && type1.type.equals("int")))
                                                            RESULT = (Object) ((Integer.parseInt(String.valueOf(type1.val))) * Integer.parseInt((String.valueOf(type2.val))));
                                                      else
                                                      {
                                                            if((type1.type.equals("int") && type2.type.equals("double")) || (type1.type.equals("double") && type2.type.equals("int")))
                                                                  RESULT = (Object) ((Double.parseDouble(String.valueOf(type1.val))) * Double.parseDouble((String.valueOf(type2.val))));
                                                            else
                                                                  table.addToLog("No se puede operar " + type1.type + " con " + type2.type);
                                                      }               
                                                }
              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= Expr MINUS Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.peek()).value;
		 if(e1 != null && e2 != null){
                                                      ObjectS aux1 = new ObjectS();
                                                      aux1.name = String.valueOf(e1);
                                                      ObjectS aux2 = new ObjectS();
                                                      aux2.name = String.valueOf(e2);
                                                      ObjectS type1 = table.getSymbolS(aux1, ambits);
                                                      ObjectS type2 = table.getSymbolS(aux2, ambits);
                                                      if ((type1.type.equals(type2.type) && type1.type.equals("int")))
                                                            RESULT = (Object) ((Integer.parseInt(String.valueOf(type1.val))) - Integer.parseInt((String.valueOf(type2.val))));
                                                      else
                                                      {
                                                            if((type1.type.equals("int") && type2.type.equals("double")) || (type1.type.equals("double") && type2.type.equals("int")))
                                                                  RESULT = (Object) ((Double.parseDouble(String.valueOf(type1.val))) - Double.parseDouble((String.valueOf(type2.val))));
                                                            else
                                                                  table.addToLog("No se puede operar " + type1.type + " con " + type2.type);
                                                      }               
                                                }
              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= Expr PLUS Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.peek()).value;
		 if(e1 != null && e2 != null){
                                                      ObjectS aux1 = new ObjectS();
                                                      aux1.name = String.valueOf(e1);
                                                      ObjectS aux2 = new ObjectS();
                                                      aux2.name = String.valueOf(e2);
                                                      ObjectS type1 = table.getSymbolS(aux1, ambits);
                                                      ObjectS type2 = table.getSymbolS(aux2, ambits);
                                                      if ((type1.type.equals(type2.type) && type1.type.equals("int")))
                                                            RESULT = (Object) ((Integer.parseInt(String.valueOf(type1.val))) + Integer.parseInt((String.valueOf(type2.val))));
                                                      else if((type1.type.equals(type2.type) && type1.type.equals("string")))
                                                      {
                                                            RESULT = (Object) (((String.valueOf(type1.val))) + String.valueOf((type2.val)));
                                                      }
                                                      else
                                                      {
                                                            if((type1.type.equals("int") && type2.type.equals("double")) || (type1.type.equals("double") && type2.type.equals("int")))
                                                                  RESULT = (Object) ((Double.parseDouble(String.valueOf(type1.val))) + Double.parseDouble((String.valueOf(type2.val))));
                                                            else
                                                                  table.addToLog("No se puede operar " + type1.type + " con " + type2.type);
                                                      }               
                                                }
              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= lParenthesis Expr NT$11 rParenthesis 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).value;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-3)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$11 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.peek()).value;
RESULT = e;
              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("NT$11",48, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= Call 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= THIS 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= LValue 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.peek()).value;
		RESULT = a;
              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= Constant 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.peek()).value;
		RESULT = c;
              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= LValue EQUAL Expr 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.peek()).value;
		RESULT = e;
                                                ObjectS aux = new ObjectS();
                                                aux.name = String.valueOf(i);
                                                ObjectS aux1 = new ObjectS();
                                                aux1 = table.getSymbolS(aux, ambits);
                                                aux1.val = String.valueOf(RESULT);
                                                table.addSymbolS(aux1, ambits);
                                                table.addToLog("Se asigno el valor " + aux1.val + " a la " + aux1.objectType + " " + aux1.name + " de tipo " + aux1.type);
                                                System.out.println(String.valueOf(i) + "= " + String.valueOf(RESULT));
              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ExprLR ::= 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("ExprLR",35, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ExprLR ::= comma Expr ExprLR 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("ExprLR",35, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PrintStmt ::= PRINT lParenthesis Expr ExprLR rParenthesis semicolon 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("PrintStmt",18, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-5)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // BreakStmt ::= BREAK semicolon 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("BreakStmt",17, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-1)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ReturnStmt ::= RETURN ExprOptional semicolon 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("ReturnStmt",16, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ForStmt ::= FOR lParenthesis ExprOptional semicolon Expr semicolon ExprOptional rParenthesis Stmt 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("ForStmt",15, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-8)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // WhileStmt ::= WHILE lParenthesis Expr rParenthesis Stmt 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("WhileStmt",14, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-4)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // IfStmtElse ::= 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("IfStmtElse",36, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // IfStmtElse ::= ELSE Stmt 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("IfStmtElse",36, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-1)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // IfStmt ::= IF lParenthesis Expr rParenthesis Stmt IfStmtElse 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("IfStmt",13, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-5)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ExprOptional ::= 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("ExprOptional",34, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ExprOptional ::= Expr 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("ExprOptional",34, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Stmt ::= StmtBlock 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Stmt ::= PrintStmt 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Stmt ::= ReturnStmt 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Stmt ::= BreakStmt 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Stmt ::= ForStmt 
            {
              Object RESULT =null;
		ambit = "for";
              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Stmt ::= WhileStmt 
            {
              Object RESULT =null;
		ambit = "while";
              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Stmt ::= IfStmt 
            {
              Object RESULT =null;
		ambit = "if";
              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Stmt ::= ExprOptional semicolon 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-1)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // StmtClosing ::= 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("StmtClosing",33, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // StmtClosing ::= Stmt StmtClosing 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("StmtClosing",33, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-1)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // VariableDeclClosing ::= 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("VariableDeclClosing",32, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VariableDeclClosing ::= VariableDeclClosing VariableDecl 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("VariableDeclClosing",32, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-1)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // StmtBlock ::= lBrace NT$10 VariableDeclClosing StmtClosing rBrace 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-3)).value;
		
                                                                        ambits.pop();/*ambits.push("fin"+ambit);*/
                                                                        if(!ambits.isEmpty())
                                                                           {                                             
                                                                             ambit = ambits.peek();
                                                                            }
                                                                        else{
                                                                             ambit = "";
                                                                                    }
                                                                                    
              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("StmtBlock",11, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-4)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$10 ::= 
            {
              Object RESULT =null;
ambits.push(ambit);
              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("NT$10",47, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Prototype ::= VOID ident lParenthesis Formals rParenthesis semicolon 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Prototype",10, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-5)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Prototype ::= Type ident lParenthesis Formals rParenthesis semicolon 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Prototype",10, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-5)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // InterfaceClosing ::= 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("InterfaceClosing",31, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // InterfaceClosing ::= Prototype InterfaceClosing 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("InterfaceClosing",31, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-1)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // InterfaceDecl ::= INTERFACE ident NT$8 lBrace NT$9 InterfaceClosing rBrace 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-5)).value;
		
                                                            ambits.pop();/*ambits.push("fin"+ambit);*/
                                                            if(!ambits.isEmpty())
                                                               {              
                                                                  ambit = ambits.peek();
                                                                }
                                                                else{
                                                                     ambit = "";
                                                                     }
                                                                     
              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("InterfaceDecl",9, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-6)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).value;
ambits.push(ambit);
              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("NT$9",46, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$8 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$RulesSS$stack.peek()).value;

                        if(ambit.equals(""))
                        {
                              table.addSymbolS(new ObjectS(i,String.valueOf(t),"","Interface","global"), ambits);
                              table.addToLog("Se creo la interface con el nombre " +  i + " de tipo " + String.valueOf(t) + " en el ambito global");
                        }                            
                        else
                        {
                              table.addSymbolS(new ObjectS(i,String.valueOf(t),"","Interface",ambit), ambits);
                              table.addToLog("Se creo la interface con el nombre " +  i + " de tipo " + String.valueOf(t) + " en el ambito " + ambit);
                        }
                              
                        ambit = i;
                        //ambits.push(ambit);
                        
              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("NT$8",45, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Field ::= FunctionDecl 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Field",8, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Field ::= VariableDecl 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Field",8, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ClassClosing ::= 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("ClassClosing",30, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ClassClosing ::= Field ClassClosing 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("ClassClosing",30, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-1)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ClassOptional3 ::= 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("ClassOptional3",29, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ClassOptional3 ::= comma ident ClassOptional3 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("ClassOptional3",29, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ClassOptional2 ::= 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("ClassOptional2",28, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ClassOptional2 ::= IMPLEMENTS ident ClassOptional3 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("ClassOptional2",28, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ClassOptional ::= 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("ClassOptional",27, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ClassOptional ::= EXTENDS ident 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("ClassOptional",27, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-1)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ClassDecl ::= CLASS ident NT$6 ClassOptional ClassOptional2 lBrace NT$7 ClassClosing rBrace 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-8)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-7)).value;
		
                                                                                    ambits.pop();/*ambits.push("fin"+ambit);*/
                                                                                    if(!ambits.isEmpty())
                                                                                    {
                                                                                          ambit = ambits.peek();
                                                                                    }
                                                                                    else{
                                                                                          ambit = "";
                                                                                    }
                                                                                      
              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("ClassDecl",7, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-8)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-4)).value;
ambits.push(ambit);
              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("NT$7",44, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$6 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$RulesSS$stack.peek()).value;

                        if(ambit.equals(""))
                        {
                              table.addSymbolS(new ObjectS(i,String.valueOf(t),"","Clase","global"), ambits);
                              table.addToLog("Se creo la clase con el nombre " +  i + " de tipo " + String.valueOf(t) + " en el ambito global");
                        }
                              
                        else
                        {
                              table.addSymbolS(new ObjectS(i,String.valueOf(t),"","Clase",ambit), ambits);
                              table.addToLog("Se creo la clase con el nombre " +  i + " de tipo " + String.valueOf(t) + " en el ambito global");
                        }
                              
                         ambit = i;
                         //ambits.push(ambit);
                        
              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("NT$6",43, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FormalsLR ::= 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("FormalsLR",26, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FormalsLR ::= comma Variable FormalsLR 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("FormalsLR",26, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Formals ::= 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Formals",6, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Formals ::= Variable FormalsLR 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Formals",6, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-1)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FunctionDecl ::= VOID ident NT$3 lParenthesis NT$4 Formals NT$5 rParenthesis StmtBlock 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-8)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-7)).value;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("FunctionDecl",5, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-8)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-4)).value;
isParameter = false;
              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("NT$5",42, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).value;
isParameter = true;
              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("NT$4",41, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$3 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$RulesSS$stack.peek()).value;

                        if(ambit.equals(""))
                        {
                              table.addSymbolS(new ObjectS(i,String.valueOf(t),"","VOID","global"), ambits);
                              table.addToLog("Se creo el procedimiento con el nombre " +  i + " de tipo " + String.valueOf(t) + " en el ambito global");
                        }
                             
                        else
                        {
                              table.addSymbolS(new ObjectS(i,String.valueOf(t),"","VOID",ambit), ambits);
                              table.addToLog("Se creo el procedimiento con el nombre " +  i + " de tipo " + String.valueOf(t) + " en el ambito " + ambit);
                        }               
                        ambit = i;
                        //ambits.push(ambit);
                        
              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("NT$3",40, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FunctionDecl ::= Type ident NT$0 lParenthesis NT$1 Formals rParenthesis NT$2 StmtBlock 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-8)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-7)).value;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("FunctionDecl",5, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-8)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-5)).value;
isParameter = false;
              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("NT$2",39, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-2)).value;
isParameter = true;
              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("NT$1",38, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$0 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$RulesSS$stack.peek()).value;

                        if(ambit.equals(""))
                        {
                              table.addSymbolS(new ObjectS(i,String.valueOf(t),"","Funcion","global"), ambits);
                              table.addToLog("Se creo la funcion con el nombre " +  i + " de tipo " + String.valueOf(t) + " en el ambito global");
                        }
                              
                        else
                        {
                              table.addSymbolS(new ObjectS(i,String.valueOf(t),"","Funcion","global"), ambits);
                              table.addToLog("Se creo la funcion con el nombre " +  i + " de tipo " + String.valueOf(t) + " en el ambito " + ambits);
                        }
                                 
                        ambit = i;
                        //ambits.push(ambit);
                        
              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("NT$0",37, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= Type BRACKETS 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-1)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= ident 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$RulesSS$stack.peek()).value;
		RESULT = t;
              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= stringConstantType 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.peek()).value;
		RESULT = t;
              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= boolConstantType 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.peek()).value;
		RESULT = t;
              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Type ::= doubleConstantType 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.peek()).value;
		RESULT = t;
              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= intConstantType 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.peek()).value;
		RESULT = t;
              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Variable ::= Type ident 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$RulesSS$stack.peek()).value;
		
                        String val = null;
                        if(t.equals("int")||t.equals("double"))
                           val = "0";
                        if(ambit.equals(""))
                        {
                              if(isParameter){
                                    table.addSymbolS(new ObjectS(i,String.valueOf(t),val,"Parametro","global"), ambits); 
                                    table.addToLog("Se declaro el parametro  con el nombre " + i + " de tipo " + String.valueOf(t) + " en el ambito global");
                              }
                                   
                              else
                              {
                                    table.addSymbolS(new ObjectS(i,String.valueOf(t),val,"Variable","global"), ambits);
                                    table.addToLog("Se declaro la variable con el nombre " +  i + " de tipo " + String.valueOf(t) + " en el ambito global");
                              }
                                           
                        }
                              
                        else
                        {
                              if(isParameter)
                              {
                                    table.addSymbolS(new ObjectS(i,String.valueOf(t),val,"Parametro",ambit), ambits);
                                    table.addToLog("Se declaro la variable con el nombre " +  i + " de tipo " + String.valueOf(t) + " en el ambito " + ambit);
                              }
                                    
                              else
                              {
                                    table.addSymbolS(new ObjectS(i,String.valueOf(t),val,"Variable",ambit), ambits);
                                    table.addToLog("Se declaro la variable con el nombre " +  i + " de tipo " + String.valueOf(t) + " en el ambito " + ambit);
                              }         
                        }
                        
              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Variable",3, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-1)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VariableDecl ::= Variable semicolon 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("VariableDecl",2, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-1)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Decl ::= error rBrace 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-1)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Decl ::= error semicolon 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-1)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Decl ::= InterfaceDecl 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Decl ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Decl ::= FunctionDecl 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decl ::= VariableDecl 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DeclLR ::= 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("DeclLR",25, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DeclLR ::= Decl DeclLR 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("DeclLR",25, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-1)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= Decl DeclLR 
            {
              Object RESULT =null;

              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-1)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          return CUP$RulesSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-1)).value;
		RESULT = start_val;
              CUP$RulesSS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$RulesSS$stack.elementAt(CUP$RulesSS$top-1)), ((java_cup.runtime.Symbol)CUP$RulesSS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$RulesSS$parser.done_parsing();
          return CUP$RulesSS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

